-> GIT operates as a form of distributed version control.

-> In a local version control system:
     Information is stored locally, and if the system experiences downtime, accessibility is compromised.

-> In centralized version control system:
      1.Involves a centralized repository where multiple individuals can work remotely and store data.
      2.In the event of a remote server failure, access to older versions becomes impossible, as the recent version is stored locally.
 
-> Hence, Git utilizes a Distributed Version Control model.
      In this setup, a local copy with version history is maintained, allowing collaboration with others remotely.

Insight: In this context, we establish two repositories â€“ a local repository and a remote repository. Each needs to be created independently, and subsequently, we connect them based on specific needs.

Install Git and setup

Further you need to have the identities to confirm who is working , creating , and commiting. Hence, for that we use "git config"

To list what all identites we have in the repo use command:"git config --global --list"

CREATING NEW CONFIG:
git config --global user.name "sushilbnk"
git config --global user.email "sushilbanka84@gmail.com"


STEPS: Working directory --> Staging Area --> Commit

Any files you generate within the repository's working directory are not automatically managed by Git. Git exclusively tracks files that have been added to the staging area.
Each commit represents a new version of the project.

TO CREATE A GIT REPOSITORY : "git init"

To delete the Git repository, simply remove the .git file from the folder.

For instance, if you create a file named GitNotes.txt in the folder, it exists in the working directory but is not yet part of the staging area.
Therefore, to include it in the staging area, you must use the git add command.

ADDING TO STAGING AREA: "git add <filename>"
UNSTAGE THE FILE      : "git rm --cached <file>..."
COMMITING FILES       :  git commit -m "messgae"
COMMIT HISTORY        :  git log

Every time you make changes to any file which is in staging area it will be brought back to working directory with the modified status.

SKIP STAGE AND COMMIT : git commit -a -m "message"
TO COMPARE AND CHECK  : git diff

PUSH AN EXISTING REPO FROM THE COMMAND LINE:
git remote add origin https://github.com/sushilbnk/Git.git
git branch -M main
git push -u origin main

TO CHECK THE REMOTE ORIGIN : git remote -v

FOR CLONING A PRJ : git clone <remote URL>

Branches:

Its the most important feature for git , as it gives us the ability to work individually and have the best version control.

TO CREATE BRANCH                    : git switch -c "branch name"
TO CHECK AVAIL BRANCHES             : git branch
TO SWITCH TO OTHER BRANCHES         : git switch 
TO SEE BOTH LOCAL & REMOTE BRANCHES : git branch --all
PUSH NEW BRANCH TO REMOTE REPO      : git push origin Sushil
TO PULL THE BRANCH FROM REMOTE REPO : git pull origin main // so if any collaborators make changes we have them before merging
MERGING BRANCHES                    : git merge <branch name>

